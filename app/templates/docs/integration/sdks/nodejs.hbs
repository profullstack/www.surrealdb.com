<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.integration">Integrations</Crumb::Item>
	<Crumb::Item @link="docs.integration.sdks">SDKs</Crumb::Item>
	<Crumb::Item @link="docs.integration.sdks.nodejs">Node.js</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
	<h2><Devicon @size="50" @type="nodejs" /> Node.js SDK for SurrealDB</h2>
	<p>The SurrealDB SDK for Node.js enables simple and advanced querying of a remote database from server-side code. All connections to SurrealDB are made over WebSockets, and automatically reconnect when the connection is terminated.</p>
	<p>To contribute to this documentation, <Link @link={{github}}>edit this file on GitHub</Link>.</p>
	<p>To contribute to the SDK code, <Link @link="https://github.com/surrealdb/surrealdb.node">submit an Issue or Pull Request here</Link>.</p>
</Layout::Text>

<Layout::Gap mini />

<blockquote green text="Note">
	This SDK is compatible with <code>V1.0.0</code>
	</blockquote>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Install the SDK</h3>
	<p>First, install the SurrealDB SDK using <code>npm</code>:</p>
	<Code @name="docs-integration-libraries-nodejs-install-npm.bash">
		npm install --save surrealdb.node
	</Code>
	<p>Alternatively, you can use install the SurrealDB SDK using <code>yarn</code>, <code>pnpm</code> or similar:</p>
	<Code @name="docs-integration-libraries-nodejs-install-yarn.bash">
		yarn add surrealdb.node
		pnpm install surrealdb.node
	</Code>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Connect to SurrealDB</h3>
	<p>Create a new app.js file and add the following code to try out some basic operations using the SurrealDB SDK.</p>
	<Code @name="docs/integration/libraries/nodejs/basic.js" />
	<p>Then run your app from the command line with:</p>
	<Code @name="docs-integration-libraries-nodejs-basic-run.bash">
		node app.js
	</Code>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>SDK methods</h3>
	<p>The JavaScript SDK comes with a number of built-in functions.</p>
</Layout::Text>

<Layout::Gap tiny />

<Layout::Table filled>
	<table>
		<thead>
			<tr>
				<th w-40>Function</th>
				<th w-60>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>
					<a href="#connect">
						<Ascua::Prism::Inline @language="js" @code="async db.connect(url, options)" />
					</a>
				</td>
				<td>Connects to a local or remote database endpoint</td>
			</tr>
			<tr>
				<td>
					<a href="#close">
						<Ascua::Prism::Inline @language="js" @code="async db.close()" />
					</a>
				</td>
				<td>Closes the persistent connection to the database</td>
			</tr>
			<tr>
				<td>
					<a href="#use">
						<Ascua::Prism::Inline @language="js" @code="async db.use({ namespace, database })" />
					</a>
				</td>
				<td>Switch to a specific namespace and database</td>
			</tr>
			<tr>
				<td>
					<a href="#info">
						<Ascua::Prism::Inline @language="js" @code="async db.info()" />
					</a>
				</td>
				<td>Returns the record of an authenticated scope user</td>
			</tr>
			<tr>
				<td>
					<a href="#signup">
						<Ascua::Prism::Inline @language="js" @code="async db.signup(vars)" />
					</a>
				</td>
				<td>Signs this connection up to a specific authentication scope</td>
			</tr>
			<tr>
				<td>
					<a href="#signin">
						<Ascua::Prism::Inline @language="js" @code="async db.signin(vars)" />
					</a>
				</td>
				<td>Signs this connection in to a specific authentication scope</td>
			</tr>
			<tr>
				<td>
					<a href="#invalidate">
						<Ascua::Prism::Inline @language="js" @code="async db.invalidate()" />
					</a>
				</td>
				<td>Invalidates the authentication for the current connection</td>
			</tr>
			<tr>
				<td>
					<a href="#authenticate">
						<Ascua::Prism::Inline @language="js" @code="async db.authenticate(token)" />
					</a>
				</td>
				<td>Authenticates the current connection with a JWT token</td>
			</tr>
			<tr>
				<td>
					<a href="#let">
						<Ascua::Prism::Inline @language="js" @code="async db.let(key, val)" />
					</a>
				</td>
				<td>Assigns a value as a parameter for this connection</td>
			</tr>
			<tr>
				<td>
					<a href="#unset">
						<Ascua::Prism::Inline @language="js" @code="async db.unset(key)" />
					</a>
				</td>
				<td>Removes a parameter for this connection</td>
			</tr>
			<tr>
				<td>
					<a href="#query">
						<Ascua::Prism::Inline @language="js" @code="async db.query(sql, vars)" />
					</a>
				</td>
				<td>Runs a set of SurrealQL statements against the database</td>
			</tr>
			<tr>
				<td>
					<a href="#select">
						<Ascua::Prism::Inline @language="js" @code="async db.select(thing)" />
					</a>
				</td>
				<td>Selects all records in a table, or a specific record</td>
			</tr>
			<tr>
				<td>
					<a href="#create">
						<Ascua::Prism::Inline @language="js" @code="async db.create(thing, data)" />
					</a>
				</td>
				<td>Creates a record in the database</td>
			</tr>
			<tr>
				<td>
					<a href="#insert">
						<Ascua::Prism::Inline @language="js" @code="async db.insert(thing, data)" />
					</a>
				</td>
				<td>Inserts one or multiple records in the database</td>
			</tr>
			<tr>
				<td>
					<a href="#update">
						<Ascua::Prism::Inline @language="js" @code="async db.update(thing, data)" />
					</a>
				</td>
				<td>Updates all records in a table, or a specific record</td>
			</tr>
			<tr>
				<td>
					<a href="#merge">
						<Ascua::Prism::Inline @language="js" @code="async db.merge(thing, data)" />
					</a>
				</td>
				<td>Modifies all records in a table, or a specific record</td>
			</tr>
			<tr>
				<td>
					<a href="#patch">
						<Ascua::Prism::Inline @language="js" @code="async db.patch(thing, data)" />
					</a>
				</td>
				<td>Applies <Link @link="https://jsonpatch.com">JSON Patch</Link> changes to all records in a table, or a specific record</td>
			</tr>
			<tr>
				<td>
					<a href="#delete">
						<Ascua::Prism::Inline @language="js" @code="async db.delete(thing)" />
					</a>
				</td>
				<td>Deletes all records, or a specific record</td>
			</tr>
		</tbody>
	</table>
</Layout::Table>

<Layout::Gap small />

<Layout::Group {{waypoint "connect"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.connect(url, options)" /></h3>
		<p>Connects to a local or remote database endpoint.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>url</code>
						</td>
						<td>
							The url of the database endpoint to connect to.
						</td>
					</tr>
					<tr>
						<td>
							<code>options</code>
						</td>
						<td>
							An object with options to initiate the connection to SurrealDB.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-nodejs-connect.js">
			// Connect to a local endpoint
			await db.connect('http://127.0.0.1:8000/rpc');

			// Connect to a remote endpoint
			await db.connect('https://cloud.surrealdb.com/rpc');

			// Specify a namespace and database pair to use
			await db.connect('https://cloud.surrealdb.com/rpc', {
				namespace: 'surrealdb',
				database: 'docs',
			});

			// Authenticate with an existing token
			// The .authenticate() function is used under the hood.
			await db.connect('https://cloud.surrealdb.com/rpc', {
				auth: '.....',
			});

			// Authenticate using a pair of credentials
			await db.connect('https://cloud.surrealdb.com/rpc', {
				auth: {
					username: 'root',
					password: 'surrealdb',
				},
			});
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "close"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.close()" /></h3>
		<p>Closes the persistent connection to the database.</p>
		<Code @name="docs-integration-libraries-nodejs-close.js">
			await db.close();
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "use"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="db.use({ namespace, database })" /></h3>
		<p>Switch to a specific namespace and database. If only the <code>namespace</code> or <code>database</code> property is specified, the current connection details will be used to fill the other property.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Properties</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>namespace</code>
							<l yellow r>Initially required</l>
						</td>
						<td>
							Switches to a specific namespace.
						</td>
					</tr>
					<tr>
						<td>
							<code>database</code>
							<l yellow r>Initially required</l>
						</td>
						<td>
							Switches to a specific database.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-nodejs-use.js">
			await db.use({ namespace: 'surrealdb', database: 'docs' });
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "info"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.info()" /></h3>
		<p>This method returns the record of an authenticated scope user.</p>
		<Code @name="docs-integration-libraries-javascript-info.js">
			const user = await db.info();
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "signup"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.signup({ namespace, database, scope, [...] })" /></h3>
		<p>Signs up to a specific authentication scope.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Properties</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>namespace</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The namespace to sign up to
						</td>
					</tr>
					<tr>
						<td>
							<code>database</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The database to sign up to
						</td>
					</tr>
					<tr>
						<td>
							<code>scope</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The scope to sign up to. Also pass any variables used in the scope
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-nodejs-signup.js">
			const token = await db.signup({
				namespace: 'surrealdb',
				database: 'docs',
				scope: 'user',

				// Also pass any properties required by the scope definition
				email: 'info@surrealdb.com',
				password: '123456',
			});
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "signin"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.signin({ ... })" /></h3>
		<p>Signs in to a root, namespace, database or scope user.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Properties</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>username</code>
							<l yellow r>Required for root, NS & DB</l>
						</td>
						<td>
							The username of the database user
						</td>
					</tr>
					<tr>
						<td>
							<code>password</code>
							<l yellow r>Required for root, NS & DB</l>
						</td>
						<td>
							The password of the database user
						</td>
					</tr>
					<tr>
						<td>
							<code>namespace</code>
							<l yellow r>Required for DB & SC</l>
						</td>
						<td>
							The namespace to sign in to
						</td>
					</tr>
					<tr>
						<td>
							<code>database</code>
							<l yellow r>Required for SC</l>
						</td>
						<td>
							The database to sign in to
						</td>
					</tr>
					<tr>
						<td>
							<code>scope</code>
						</td>
						<td>
							The scope to sign in to. Also pass any variables used in the scope
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-nodejs-signin.js">
			// Authenticate with a root user
			const token = await db.signin({
				username: 'root',
				password: 'surrealdb',
			});

			// Authenticate with a Namespace user
			const token = await db.signin({
				namespace: 'surrealdb',
				username: 'tobie',
				password: 'surrealdb',
			});

			// Authenticate with a Database user
			const token = await db.signin({
				namespace: 'surrealdb',
				database: 'docs',
				username: 'tobie',
				password: 'surrealdb',
			});

			// Authenticate with a Scope user
			const token = await db.signin({
				namespace: 'surrealdb',
				database: 'docs',
				scope: 'user',

				// Also pass any properties required by the scope definition
				email: 'info@surrealdb.com',
				password: '123456',
			});
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "invalidate"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.invalidate()" /></h3>
		<p>Invalidates the authentication for the current connection.</p>
		<Code @name="docs-integration-libraries-nodejs-invalidate.js">
			await db.invalidate();
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "authenticate"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.authenticate(token)" /></h3>
		<p>Authenticates the current connection with a JWT token.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>token</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The JWT authentication token.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-nodejs-authenticate.js">
			await db.authenticate('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTdXJyZWFsREIiLCJpYXQiOjE1MTYyMzkwMjIsIm5iZiI6MTUxNjIzOTAyMiwiZXhwIjoxODM2NDM5MDIyLCJOUyI6InRlc3QiLCJEQiI6InRlc3QiLCJTQyI6InVzZXIiLCJJRCI6InVzZXI6dG9iaWUifQ.N22Gp9ze0rdR06McGj1G-h2vu6a6n9IVqUbMFJlOxxA');
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "let"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.let(key, val)" /></h3>
		<p>Assigns a value as a parameter for this connection.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>key</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Specifies the name of the variable.
						</td>
					</tr>
					<tr>
						<td>
							<code>val</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Assigns the value to the variable name.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-nodejs-let.js">
			// Assign the variable on the connection
			await db.let('name', {
				first: 'Tobie',
				last: 'Morgan Hitchcock',
			});

			// Use the variable in a subsequent query
			await db.query('CREATE person SET name = $name');

			// Use the variable in a subsequent query
			await db.query('SELECT * FROM person WHERE name.first = $name.first');
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "unset"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.unset(key)" /></h3>
		<p>Removes a parameter for this connection.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>key</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Specifies the name of the variable.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-nodejs-unset.js">
			// Remove the variable from the connection
			await db.unset('name');
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "query"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="js" @code="async db.query(query, vars)" /></h3>
		<p>Runs a set of SurrealQL statements against the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>query</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Specifies the SurrealQL statements.
						</td>
					</tr>
					<tr>
						<td>
							<code>vars</code>
							<l faint r>Optional</l>
						</td>
						<td>
							Assigns variables which can be used in the query.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-nodejs-query.js">
			// Assign the variable on the connection
            const result = await db.query(
	        'CREATE person SET name = "John"; SELECT * FROM type::table($tb);',
			{ tb: 'person' }
			);

			// Get the first result from the first query
			const created = result[0].result[0];

			// Get all of the results from the second query
			const people = result[1].result;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "select"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.select(thing)" /></h3>
		<p>Selects all records in a table, or a specific record, from the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or a record ID to select.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-javascript-select.js">
			// Select all records from a table
			const people = await db.select('person');

			// Select a specific record from a table
			const [person] = await db.select('person:h5wxrf2ewk8xjxosxtyc');
		</Code>
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-nodejs-select-func.surql">
			SELECT * FROM $thing;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "create"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="js" @code="async db.create(thing, data)" /></h3>
		<p>Creates a record in the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or the specific record ID to create.
						</td>
					</tr>
					<tr>
						<td>
							<code>data</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The document / record data to insert.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-javascript-create.js">

// Create a record with a random ID
const [person] = await db.create('person');

// Create a record with a specific ID
const [record] = await db.create('person:tobie', {
	name: 'Tobie',
	settings: {
		active: true,
		marketing: true,
	},
});

// The content you are creating the record with might differ from the return type
const [record] = await db.create('person:tobie', {
	name: 'Tobie',
});
		</Code>
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-nodejs-create-func.surql">
			CREATE $thing CONTENT $data;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "insert"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.insert(thing, data)" /></h3>
		<p>Insers one or multiple records in the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name to insert to.
						</td>
					</tr>
					<tr>
						<td>
							<code>data</code>
							<l faint r>Optional</l>
						</td>
						<td>
							Either a single document/record or an array of documents/records to insert
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-javascript-insert.js">

// Insert a single record
const [person] = await db.insert('person', {
	name: 'Tobie',
	settings: {
		active: true,
		marketing: true,
	},
});

// Insert multiple records
const people = await db.insert('person', [
	{
		name: 'Tobie',
		settings: {
			active: true,
			marketing: true,
		},
	},
	{
		name: 'Jaime',
		settings: {
			active: true,
			marketing: true,
		},
	},
]);

// The content you are creating the record with might differ from the return type
const people = await db.insert('person', [
	{ name: 'Tobie' },
	{ name: 'Jaime' },
]);



		</Code>
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-javascript-insert-func.surql">
			INSERT INTO $thing $data;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "update"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.update(thing, data)" /></h3>
		<p>Updates all records in a table, or a specific record, in the database.</p>
		<blockquote yellow text="Note">This function replaces the current document / record data with the specified data.</blockquote>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or the specific record ID to update.
						</td>
					</tr>
					<tr>
						<td>
							<code>data</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The document / record data to insert.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-nodejs-update.js">
// Update all records in a table
const people = await db.update('person');

// Update a record with a specific ID
const [person] = await db.update('person:tobie', {
	name: 'Tobie',
	settings: {
		active: true,
		marketing: true,
	},
});

// The content you are updating the record with might differ from the return type
const [record] = await db.update('person:tobie', {
	name: 'Tobie',
});
		</Code>
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-nodejs-update-func.surql">
			UPDATE $thing CONTENT $data;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "merge"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.merge(thing, data)" /></h3>
		<p>Modifies all records in a table, or a specific record, in the database.</p>
		<blockquote yellow text="Note">This function merges the current document / record data with the specified data.</blockquote>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or the specific record ID to merge
						</td>
					</tr>
					<tr>
						<td>
							<code>data</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The document / record data to insert.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-nodejs-merge.js" >
				// Update all records in a table
				const people = await db.merge('person', {
					updated_at: new Date(),
				});

				// Update a record with a specific ID
				const [person] = await db.merge('person:tobie', {
					updated_at: new Date(),
					settings: {
						active: true,
					},
				});

				// The content you are merging the record with might differ from the return type
				const [record] = await db.merge('person:tobie', {
					name: 'Tobie',
				});

		</Code>
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-nodejs-merge-func.surql">
			UPDATE $thing MERGE $data;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "patch"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.patch(thing, data)" /></h3>
		<p>Applies <Link @link="https://jsonpatch.com">JSON Patch</Link> changes to all records, or a specific record, in the database.</p>
		<blockquote yellow text="Note">This function patches the current document / record data with the specified <Link @link="https://jsonpatch.com">JSON Patch</Link> data.</blockquote>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or the specific record ID to patch.
						</td>
					</tr>
					<tr>
						<td>
							<code>data</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The <Link @link="https://jsonpatch.com">JSON Patch</Link> data with which to patch the records.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/javascript/patch.ts" @language="ts" />
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-nodejs-patch-func.surql">
			UPDATE $thing PATCH $data;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "delete"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="ts" @code="async db.delete(thing)" /></h3>
		<p>Deletes all records in a table, or a specific record, from the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>thing</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or a record ID to delete.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-nodejs-delete.ts" @language="ts">
			// Delete all records from a table
			await db.delete('person');

			// Delete a specific record from a table
			await db.delete('person:h5wxrf2ewk8xjxosxtyc');
		</Code>
		<p>This function will run the following query in the database:</p>
		<Code @name="docs-integration-libraries-nodejs-delete-func.surql">
			DELETE * FROM $thing;
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap large />
